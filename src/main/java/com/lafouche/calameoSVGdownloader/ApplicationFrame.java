package com.lafouche.calameoSVGdownloader;

import java.awt.Desktop;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.IntStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import org.apache.batik.transcoder.Transcoder;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;
import org.apache.commons.io.FileUtils;
import org.apache.fop.svg.PDFTranscoder;
import org.apache.pdfbox.Loader;
import org.apache.pdfbox.pdmodel.PDDocument;


public class ApplicationFrame extends javax.swing.JFrame {

    public ApplicationFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jFC_DownloadFolder = new javax.swing.JFileChooser();
        jFC_SVGConvert = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTXTF_DownloadURL = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jBTN_DownloadFolder = new javax.swing.JButton();
        jLBL_SelectedDownloadFolder = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCHKB_ConvertToPDF = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jSPN_DownloadPagesCount = new javax.swing.JSpinner();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 64), new java.awt.Dimension(0, 32767));
        jBTN_Download = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 64), new java.awt.Dimension(0, 32767));
        jBTN_DownloadFolder1 = new javax.swing.JButton();
        jLBL_SelectedSVGFile2Convert = new javax.swing.JLabel();
        jBTN_ConvertSVG2PDF = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuAbout = new javax.swing.JMenu();
        jMenuExit = new javax.swing.JMenu();

        jFC_DownloadFolder.setAcceptAllFileFilterUsed(false);
        jFC_DownloadFolder.setCurrentDirectory(new java.io.File("C:\\"));
            jFC_DownloadFolder.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

            jFC_SVGConvert.setAcceptAllFileFilterUsed(false);
            jFC_SVGConvert.setCurrentDirectory(new java.io.File("C:\\"));

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                setTitle("Calameo Document Extractor");
                setLocation(new java.awt.Point(0, 0));
                setMinimumSize(new java.awt.Dimension(1024, 768));
                addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent evt) {
                        formWindowClosing(evt);
                    }
                });

                jPanel1.setLayout(new java.awt.GridBagLayout());

                jLabel1.setText("URL to download content from");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jLabel1, gridBagConstraints);

                jTXTF_DownloadURL.setPreferredSize(new java.awt.Dimension(512, 32));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jTXTF_DownloadURL, gridBagConstraints);

                jLabel2.setText("Folder to download content to");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jLabel2, gridBagConstraints);

                jBTN_DownloadFolder.setText("Select");
                jBTN_DownloadFolder.setPreferredSize(new java.awt.Dimension(128, 32));
                jBTN_DownloadFolder.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        SVGFile2ConvertActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 12;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jBTN_DownloadFolder, gridBagConstraints);

                jLBL_SelectedDownloadFolder.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jLBL_SelectedDownloadFolder, gridBagConstraints);

                jLabel3.setText("Convert all SVG images to PDF ?");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jLabel3, gridBagConstraints);

                jCHKB_ConvertToPDF.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                jCHKB_ConvertToPDF.setPreferredSize(new java.awt.Dimension(75, 32));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jCHKB_ConvertToPDF, gridBagConstraints);

                jLabel4.setText("Number of pages to download");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jLabel4, gridBagConstraints);

                jSPN_DownloadPagesCount.setModel(new javax.swing.SpinnerNumberModel(1, 1, 9999, 1));
                jSPN_DownloadPagesCount.setPreferredSize(new java.awt.Dimension(150, 32));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jSPN_DownloadPagesCount, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                jPanel1.add(filler1, gridBagConstraints);

                jBTN_Download.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
                jBTN_Download.setText("Extract");
                jBTN_Download.setPreferredSize(new java.awt.Dimension(256, 48));
                jBTN_Download.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ExtractCalameoDocument(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jBTN_Download, gridBagConstraints);

                jLabel5.setText("SVG file");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 12;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jLabel5, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 11;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                jPanel1.add(filler2, gridBagConstraints);

                jBTN_DownloadFolder1.setText("Select");
                jBTN_DownloadFolder1.setPreferredSize(new java.awt.Dimension(128, 32));
                jBTN_DownloadFolder1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jBTN_DownloadFolder1selectDownloadFolderActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jBTN_DownloadFolder1, gridBagConstraints);

                jLBL_SelectedSVGFile2Convert.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 13;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jLBL_SelectedSVGFile2Convert, gridBagConstraints);

                jBTN_ConvertSVG2PDF.setText("Convert to PDF");
                jBTN_ConvertSVG2PDF.setPreferredSize(new java.awt.Dimension(256, 48));
                jBTN_ConvertSVG2PDF.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jBTN_ConvertSVG2PDFselectDownloadFolderActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 14;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel1.add(jBTN_ConvertSVG2PDF, gridBagConstraints);

                getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

                jMenuAbout.setText("About");
                jMenuBar1.add(jMenuAbout);

                jMenuExit.setText("Exit");
                jMenuExit.addMenuListener(new javax.swing.event.MenuListener() {
                    public void menuCanceled(javax.swing.event.MenuEvent evt) {
                    }
                    public void menuDeselected(javax.swing.event.MenuEvent evt) {
                    }
                    public void menuSelected(javax.swing.event.MenuEvent evt) {
                        jMenuExitMenuSelected(evt);
                    }
                });
                jMenuBar1.add(jMenuExit);

                setJMenuBar(jMenuBar1);

                pack();
            }// </editor-fold>//GEN-END:initComponents

    private void jMenuExitMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuExitMenuSelected
        System.exit(0);
    }//GEN-LAST:event_jMenuExitMenuSelected

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void ExtractCalameoDocument(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtractCalameoDocument
        //we check first that we selected a URL to download files
        if(jTXTF_DownloadURL.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a URL to download files", "Alert", JOptionPane.ERROR_MESSAGE); 
            return;
        }
        
        //we retrieve the download and check that returns a valid URL                
        URL validDownloadURL;
        try {           
            validDownloadURL = new URL(jTXTF_DownloadURL.getText());                             
        } catch(MalformedURLException exception) {
            JOptionPane.showMessageDialog(null, "Please enter a valid URL to download files", "Alert", JOptionPane.ERROR_MESSAGE); 
            return;
        }

        //we retrieve the selected folder to download files and check that's a directory
        File extractToFolder = jFC_DownloadFolder.getSelectedFile();
        if(extractToFolder == null) {
            JOptionPane.showMessageDialog(null, "Please select a folder to download files", "Alert", JOptionPane.ERROR_MESSAGE); 
            return;
        }
        
        int pagesCount = 1;
        if(jSPN_DownloadPagesCount.getModel() instanceof SpinnerNumberModel pagesCountSpinnnerModel) {
            pagesCount = pagesCountSpinnnerModel.getNumber().intValue();    
        } else {
            JOptionPane.showMessageDialog(null, "Please select a number for downloading pages", "Alert", JOptionPane.ERROR_MESSAGE); 
            return;
        }
                        
        downloadDocuments(validDownloadURL, extractToFolder, pagesCount);           
    }//GEN-LAST:event_ExtractCalameoDocument

    private void SVGFile2ConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVGFile2ConvertActionPerformed
        int returnValue = jFC_SVGConvert.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION)
            jLBL_SelectedSVGFile2Convert.setText( jFC_SVGConvert.getSelectedFile().getAbsolutePath() );
    }//GEN-LAST:event_SVGFile2ConvertActionPerformed

    private void jBTN_ConvertSVG2PDFselectDownloadFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_ConvertSVG2PDFselectDownloadFolderActionPerformed
        File svgFile2Convert = jFC_SVGConvert.getSelectedFile();
        if(svgFile2Convert == null) {
            JOptionPane.showMessageDialog(null, "Please select a SVG file to download files", "Alert", JOptionPane.ERROR_MESSAGE); 
            return;
        }  
        
        try {
            transcodeToPdf(svgFile2Convert).save(new File(svgFile2Convert.getParent(), "convertedPdf.pdf"));
        } catch (IOException ex) {
            Logger.getLogger(ApplicationFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBTN_ConvertSVG2PDFselectDownloadFolderActionPerformed

    private void jBTN_DownloadFolder1selectDownloadFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTN_DownloadFolder1selectDownloadFolderActionPerformed
        int returnValue = jFC_DownloadFolder.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION)
            jLBL_SelectedDownloadFolder.setText( jFC_DownloadFolder.getSelectedFile().getAbsolutePath() );
    }//GEN-LAST:event_jBTN_DownloadFolder1selectDownloadFolderActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton jBTN_ConvertSVG2PDF;
    private javax.swing.JButton jBTN_Download;
    private javax.swing.JButton jBTN_DownloadFolder;
    private javax.swing.JButton jBTN_DownloadFolder1;
    private javax.swing.JCheckBox jCHKB_ConvertToPDF;
    private javax.swing.JFileChooser jFC_DownloadFolder;
    private javax.swing.JFileChooser jFC_SVGConvert;
    private javax.swing.JLabel jLBL_SelectedDownloadFolder;
    private javax.swing.JLabel jLBL_SelectedSVGFile2Convert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenuAbout;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuExit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSPN_DownloadPagesCount;
    private javax.swing.JTextField jTXTF_DownloadURL;
    // End of variables declaration//GEN-END:variables

    private void downloadDocuments(URL firstDownloadURL, File extractToFolder, int pagesCount) {

        IntStream.range(1, pagesCount + 1).forEach(pagesIndex -> {
            try {
                System.out.println("page_" + pagesIndex + ".svg");
                
                URL downloadURL = adaptDownloadURL(firstDownloadURL, pagesIndex);
                
                if(downloadURL != null)
                    FileUtils.copyURLToFile(
                        downloadURL,
                        new File(extractToFolder, "page_" + pagesIndex + ".svg")/*,
                        CONNECT_TIMEOUT,
                        READ_TIMEOUT*/);
                        } 
            
            catch (IOException ex) {
                Logger.getLogger(ApplicationFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        try {
            Desktop.getDesktop().open(extractToFolder);
        } catch (IOException ex) {
            Logger.getLogger(ApplicationFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private URL adaptDownloadURL(URL downloadURL, int pagesIndex) {
        
        Pattern pattern = Pattern.compile("/p[0-9]+.svg", Pattern.CASE_INSENSITIVE);
        Matcher matcher = pattern.matcher(downloadURL.toString());

        if(matcher.find()) {
            String newURL = downloadURL.toString().substring(0, matcher.start()) + 
                            "/p" + pagesIndex + ".svg" +
                            downloadURL.toString().substring(matcher.end());
            
            try {
                return new URL(newURL);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ApplicationFrame.class.getName()).log(Level.SEVERE, null, ex);                
            }
        } else {
            System.out.println("Match not found");
        }
        
        return null;
    }
    
    private PDDocument transcodeToPdf(File svgFile/*byte[] svg*/) throws IOException {
        Transcoder transcoder = new PDFTranscoder();
        int dpi = 100;
        transcoder.addTranscodingHint(PDFTranscoder.KEY_WIDTH, (dpi * 8.5f));
        transcoder.addTranscodingHint(PDFTranscoder.KEY_HEIGHT, (dpi * 11f));

        TranscoderInput transcoderInput = new TranscoderInput(new FileInputStream(svgFile));
        ByteArrayOutputStream documentStream = new ByteArrayOutputStream();
        TranscoderOutput transcoderOutput = new TranscoderOutput(documentStream);

        try {
            transcoder.transcode(transcoderInput, transcoderOutput);
            documentStream.flush();
            return Loader.loadPDF(documentStream.toByteArray());
        } catch (Exception e) {
            throw new IOException("Error transcoding SVG to PDF", e);
        } finally {
            documentStream.close();
        }
    }

    
}
